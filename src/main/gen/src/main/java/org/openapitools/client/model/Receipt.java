/*
 * Receipt Processor
 * A simple receipt processor
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Receipt
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-20T14:55:49.291601-04:00[America/New_York]")
public class Receipt {
  public static final String SERIALIZED_NAME_RETAILER = "retailer";
  @SerializedName(SERIALIZED_NAME_RETAILER)
  private String retailer;

  public static final String SERIALIZED_NAME_PURCHASE_DATE = "purchaseDate";
  @SerializedName(SERIALIZED_NAME_PURCHASE_DATE)
  private LocalDate purchaseDate;

  public static final String SERIALIZED_NAME_PURCHASE_TIME = "purchaseTime";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TIME)
  private String purchaseTime;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private String total;

  public Receipt() {
  }

  public Receipt retailer(String retailer) {
    
    this.retailer = retailer;
    return this;
  }

   /**
   * The name of the retailer or store the receipt is from.
   * @return retailer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "M&M Corner Market", required = true, value = "The name of the retailer or store the receipt is from.")

  public String getRetailer() {
    return retailer;
  }


  public void setRetailer(String retailer) {
    this.retailer = retailer;
  }


  public Receipt purchaseDate(LocalDate purchaseDate) {
    
    this.purchaseDate = purchaseDate;
    return this;
  }

   /**
   * The date of the purchase printed on the receipt.
   * @return purchaseDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Fri Dec 31 19:00:00 EST 2021", required = true, value = "The date of the purchase printed on the receipt.")

  public LocalDate getPurchaseDate() {
    return purchaseDate;
  }


  public void setPurchaseDate(LocalDate purchaseDate) {
    this.purchaseDate = purchaseDate;
  }


  public Receipt purchaseTime(String purchaseTime) {
    
    this.purchaseTime = purchaseTime;
    return this;
  }

   /**
   * The time of the purchase printed on the receipt. 24-hour time expected.
   * @return purchaseTime
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "13:01", required = true, value = "The time of the purchase printed on the receipt. 24-hour time expected.")

  public String getPurchaseTime() {
    return purchaseTime;
  }


  public void setPurchaseTime(String purchaseTime) {
    this.purchaseTime = purchaseTime;
  }


  public Receipt items(List<Item> items) {
    
    this.items = items;
    return this;
  }

  public Receipt addItemsItem(Item itemsItem) {
    this.items.add(itemsItem);
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Item> getItems() {
    return items;
  }


  public void setItems(List<Item> items) {
    this.items = items;
  }


  public Receipt total(String total) {
    
    this.total = total;
    return this;
  }

   /**
   * The total amount paid on the receipt.
   * @return total
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "6.49", required = true, value = "The total amount paid on the receipt.")

  public String getTotal() {
    return total;
  }


  public void setTotal(String total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Receipt receipt = (Receipt) o;
    return Objects.equals(this.retailer, receipt.retailer) &&
        Objects.equals(this.purchaseDate, receipt.purchaseDate) &&
        Objects.equals(this.purchaseTime, receipt.purchaseTime) &&
        Objects.equals(this.items, receipt.items) &&
        Objects.equals(this.total, receipt.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retailer, purchaseDate, purchaseTime, items, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Receipt {\n");
    sb.append("    retailer: ").append(toIndentedString(retailer)).append("\n");
    sb.append("    purchaseDate: ").append(toIndentedString(purchaseDate)).append("\n");
    sb.append("    purchaseTime: ").append(toIndentedString(purchaseTime)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("retailer");
    openapiFields.add("purchaseDate");
    openapiFields.add("purchaseTime");
    openapiFields.add("items");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("retailer");
    openapiRequiredFields.add("purchaseDate");
    openapiRequiredFields.add("purchaseTime");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("total");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Receipt
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Receipt.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Receipt is not found in the empty JSON string", Receipt.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Receipt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Receipt` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Receipt.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("retailer") != null && !jsonObj.get("retailer").isJsonNull()) && !jsonObj.get("retailer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `retailer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("retailer").toString()));
      }
      if ((jsonObj.get("purchaseTime") != null && !jsonObj.get("purchaseTime").isJsonNull()) && !jsonObj.get("purchaseTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseTime").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonObject(jsonArrayitems.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("total") != null && !jsonObj.get("total").isJsonNull()) && !jsonObj.get("total").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Receipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Receipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Receipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Receipt.class));

       return (TypeAdapter<T>) new TypeAdapter<Receipt>() {
           @Override
           public void write(JsonWriter out, Receipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Receipt read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Receipt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Receipt
  * @throws IOException if the JSON string is invalid with respect to Receipt
  */
  public static Receipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Receipt.class);
  }

 /**
  * Convert an instance of Receipt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

